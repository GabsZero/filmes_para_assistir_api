// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
)

const countFilme = `-- name: CountFilme :one
SELECT count(*) FROM filmes
`

func (q *Queries) CountFilme(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countFilme)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFilme = `-- name: CreateFilme :one
INSERT INTO filmes (
  nome, tipo_id
) VALUES (
  $1, $2
)
RETURNING id, nome, assistido, tipo_id, created_at
`

type CreateFilmeParams struct {
	Nome   string
	TipoID int64
}

func (q *Queries) CreateFilme(ctx context.Context, arg CreateFilmeParams) (Filme, error) {
	row := q.db.QueryRow(ctx, createFilme, arg.Nome, arg.TipoID)
	var i Filme
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Assistido,
		&i.TipoID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFilme = `-- name: DeleteFilme :exec
DELETE FROM filmes
WHERE id = $1
`

func (q *Queries) DeleteFilme(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFilme, id)
	return err
}

const getFilme = `-- name: GetFilme :one
SELECT id, nome, assistido, tipo_id, created_at FROM filmes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFilme(ctx context.Context, id int64) (Filme, error) {
	row := q.db.QueryRow(ctx, getFilme, id)
	var i Filme
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Assistido,
		&i.TipoID,
		&i.CreatedAt,
	)
	return i, err
}

const listFilmes = `-- name: ListFilmes :many
SELECT f.id, f.nome, f.assistido, t.nome as "tipo" FROM filmes f
join tipos t on f.tipo_id = t.id
WHERE assistido = $1 
ORDER BY f.nome
OFFSET $2
LIMIT $3
`

type ListFilmesParams struct {
	Assistido bool
	Offset    int32
	Limit     int32
}

type ListFilmesRow struct {
	ID        int64
	Nome      string
	Assistido bool
	Tipo      string
}

func (q *Queries) ListFilmes(ctx context.Context, arg ListFilmesParams) ([]ListFilmesRow, error) {
	rows, err := q.db.Query(ctx, listFilmes, arg.Assistido, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFilmesRow
	for rows.Next() {
		var i ListFilmesRow
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Assistido,
			&i.Tipo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFilme = `-- name: UpdateFilme :exec
UPDATE filmes
  set nome = $2,
  tipo_id = $3,
  assistido = $4
WHERE id = $1
`

type UpdateFilmeParams struct {
	ID        int64
	Nome      string
	TipoID    int64
	Assistido bool
}

func (q *Queries) UpdateFilme(ctx context.Context, arg UpdateFilmeParams) error {
	_, err := q.db.Exec(ctx, updateFilme,
		arg.ID,
		arg.Nome,
		arg.TipoID,
		arg.Assistido,
	)
	return err
}
